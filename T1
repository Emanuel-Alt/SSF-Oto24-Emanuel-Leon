import math

def cos_taylor_direct(x, tolerance):
    """Calcula cos(x) usando la serie de Taylor directamente hasta que el término adicional sea menor que la tolerancia."""
    sum_cos = 1.0  # Primer término de la serie
    term = 1.0
    n = 1

    results = []

    while abs(term) > tolerance:
        term = ((-1)**n) * (x**(2*n)) / math.factorial(2*n)
        sum_cos += term
        relative_error = abs(sum_cos - math.cos(x)) / abs(math.cos(x))
        results.append((n, sum_cos, relative_error))
        n += 1

    return results


def cos_taylor_partial(x, tolerance):
    """Calcula cos(x) usando la serie de Taylor con computación parcial (optimizando el cálculo)."""
    sum_cos = 1.0  # Primer término de la serie
    term = 1.0
    n = 1

    results = []

    while abs(term) > tolerance:
        term *= -x**2 / ((2*n - 1) * (2*n))  # Usa el término anterior para calcular el nuevo
        sum_cos += term
        relative_error = abs(sum_cos - math.cos(x)) / abs(math.cos(x))
        results.append((n, sum_cos, relative_error))
        n += 1

    return results

def print_results(results, method_name):
    print(f"Results for {method_name}:")
    print(f"{'Iteration':<10}{'Sum':<20}{'Relative Error':<20}")
    print("-" * 50)
    for n, sum_cos, relative_error in results:
        print(f"{n:<10}{sum_cos:<20}{relative_error:<20}")
    print("\n")

# Prueba con diferentes valores de x y tolerancias
x_values = [0.1, 1, 10, 100]
tolerances = [1e-4, 1e-8]

for x in x_values:
    for tol in tolerances:
        print(f"Evaluating cos({x}) with tolerance {tol}:\n")

        direct_results = cos_taylor_direct(x, tol)
        partial_results = cos_taylor_partial(x, tol)

        print_results(direct_results, "Direct Series")
        print_results(partial_results, "Partial Computation")
# Trabajo 1: Métodos de Simplificaciones

Este proyecto es parte de un trabajo de evaluación de métodos numéricos para la evaluación de funciones matemáticas usando series de Taylor. Se implementan dos métodos para la evaluación de `cos(x)` y se compara su convergencia y precisión.

## a) Variantes de Horner
- Implementación del algoritmo de Horner y sus variantes se realizará con base en el material de Bendersky's website.

## b) Evaluación de `cos(x)` mediante series de Taylor
Se implementan dos métodos:
1. **Serie Directa:** Calcular `cos(x)` sumando directamente los términos de la serie de Taylor hasta que el término adicional sea menor que una tolerancia especificada.
2. **Computación Parcial:** Optimización de la serie de Taylor utilizando el término anterior para calcular el siguiente.

### Resultados esperados:
- Tablas de comparación de convergencia con diferentes tolerancias (`10^4` y `10^8`).
- Análisis del comportamiento del algoritmo para valores pequeños y grandes de `x`.

## c) Datos de Estrellas
- Reproducción de un diagrama HR usando los datos provistos en `stars.dat`.

## d) Datos de Alturas
- Visualización gráfica de los datos de alturas de hombres mexicanos.

## Instalación

Para ejecutar este proyecto, sigue estos pasos:

1. Clona el repositorio en tu máquina local:

    ```bash
    git clone https://github.com/TU_USUARIO/TU_REPOSITORIO.git
    cd TU_REPOSITORIO
    ```

2. Asegúrate de tener Python instalado (versión 3.x).

3. Ejecuta el archivo de Python con el siguiente comando:

    ```bash
    python trabajo1.py
    ```

## Ejecución

El código `trabajo1.py` ejecutará los cálculos para diferentes valores de `x` y tolerancias, mostrando los resultados en la terminal. Se generarán tablas que muestran la suma parcial de `cos(x)` y el error relativo de la aproximación en cada iteración.
